{"version":3,"sources":["data/BuildingQuestions.js","data/ProfileQuestions.js","views/Questionnaire.js","views/Home.js","data/MetricConverter.js","utils/DataFetcherAndParser.js","views/Visualization.js","components/App.js","serviceWorker.js","index.js"],"names":["Questionnaire","props","helpText","buildings","console","log","state","forEach","building","name","initializeResponsesStateForBuilding","handleScroll","bind","questionElements","inputComponents","q","profileQuestions","inputOptions","map","ans","index","key","type","value","checked","gradeLevel","onChange","event","setState","target","push","className","prompt","this","CHOOSE_ONE","style","age","evt","placeholder","major","id","residence","window","addEventListener","removeEventListener","maxScroll","document","body","scrollHeight","innerHeight","Math","round","scrollY","locationName","questionID","newValue","oldState","newState","num","Number","parseFloat","constrainValue","allLocations","disableLocation","filter","possibleResponses","b","includes","category","sort","diningHallNames","min","max","step","handleChangeRating","RATING","handleChangeChooseOne","res","Boolean","handleChangeChooseMultiple","CHOOSE_MULTIPLE","Object","keys","buildingQuestions","renderRatingQuestion","renderChooseOneQuestion","renderChooseMultipleQuestion","Error","init","method","headers","JSON","stringify","profile","response","fetch","then","json","input","progressElementStyle","interpolateGreys","percentComplete","interpolateGreens","onClick","submitResponses","renderProfileQuestions","renderQuestions","buildingState","sections","question","val","Component","Home","to","metricToDescriptor","STUDY_QUALITY_0","STUDY_QUALITY_1","STUDY_QUALITY_2","STUDY_QUALITY_3","STUDY_QUALITY_4","STUDY_QUALITY_5","STUDY_QUALITY_6","STUDY_QUALITY_7","STUDY_QUALITY_8","STUDY_QUALITY_9","STUDY_QUALITY_10","LIVING_AND_EATING_0","LIVING_AND_EATING_1","LIVING_AND_EATING_2","LIVING_AND_EATING_3","LIVING_AND_EATING_4","LIVING_AND_EATING_5","LIVING_AND_EATING_6","MISC_0","MISC_1","MISC_2","MISC_3","metricToColorInterpolation","interpolateRdYlGn","interpolateRdYlBu","interpolateRdPu","interpolateYlGn","interpolateYlOrRd","interpolateRdBu","interpolateBrBG","interpolateRdGy","metricToQuestionType","DataFetcherAndParser","url","metrics","floor","random","length","metric","Visualization","dimensions","height","width","strokeMap","colorMap","svg","React","createRef","d3RenderMap","getAverages","parseRanking","selectedMetric","data","a","d","prevProps","prevState","snapshot","d3UpdateMap","updateTooltip","display","rank","color","locationCategory","tooltip","geoJSON","select","current","noStreets","features","feature","properties","onlyStreets","filteredData","streetData","projection","geoMercator","fitExtent","path","geoPath","zoomFunc","zoom","scaleExtent","on","transform","g","attr","k","transition","duration","call","zoomIdentity","zoomTransform","node","invert","append","selectAll","join","text","ranking","i","undefined","findRankAndUpdateTooltip","bounds","x0","y0","x1","y1","stopPropagation","translate","scale","mouse","getTypeOf","getColor","scaleLinear","domain","extent","v","range","e","selected","disabled","hidden","getAllQuestionIDs","getQuestionDescriptor","numVotes","subtitleLogic","rating","rankLogic","viewBox","preserveAspectRatio","ref","App","fetchedJSON","parseBuildingInformation","names","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.638f7767.chunk.js","sourcesContent":["export default {\r\n  \"STUDY_QUALITY\": [\r\n    {\r\n      \"prompt\": \"How enjoyable is having a lecture in the following buildings?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How easy/hard is it to find lecture rooms, exits, or bathrooms?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How noisy are the following buildings?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How comfortable, in general, are the rooms in the following buildings?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How appropriate for group meetings are the following buildings?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How appropriate for studying alone are the following buildings?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Where did you find yourself working on your IQP and/or MQP the most?\",\r\n      \"type\": \"CHOOSE_MULTIPLE\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Where did you find yourself studying for exams the most?\",\r\n      \"type\": \"CHOOSE_MULTIPLE\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"What is your favorite spot for studying for finals/midterms?\",\r\n      \"type\": \"CHOOSE_ONE\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"What is your LEAST favorite spot for studying for finals/midterms?\",\r\n      \"type\": \"CHOOSE_ONE\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How likely are you to skip a class in the following buildings?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\"]\r\n    }\r\n  ],\r\n  \"LIVING_AND_EATING\": [\r\n    {\r\n      \"prompt\": \"Best / worst places to have a meal at?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Best / worst places to relax after class?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Best / worst places to chill with friends?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Best / worst places to do extra-curriculars (club meetings, exercise, etc)?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Best / worst places to nap?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Which places did you spend the most time at this school year?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Rate each dining hall\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"poi\"]\r\n    }\r\n  ],\r\n  \"MISC\": [\r\n    {\r\n      \"prompt\": \"Best / worst places to poop at?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"How good looking are the students that frequent these locations?\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Rate the smell of each location\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Most / least photogenic locations on campus\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    },\r\n    {\r\n      \"prompt\": \"Best / worst places to be at after midnight\",\r\n      \"type\": \"RATING\",\r\n      \"filter\": [\"building\", \"poi\", \"residenceHall\"]\r\n    }\r\n  ]\r\n};","export default [\r\n  {\r\n    \"prompt\": \"What grade level are you currently?\",\r\n    \"type\": \"CHOOSE_ONE\",\r\n    \"inputOptions\": [\r\n      \"Freshman\",\r\n      \"Sophomore\",\r\n      \"Junior\",\r\n      \"Senior or 4th+ year undergrad\",\r\n      \"Graduate Student\",\r\n      \"Alumnus\"\r\n    ]\r\n  },\r\n  {\r\n    \"prompt\": \"How old are you?\",\r\n    \"type\": \"TEXT_NUMBER\",\r\n    \"inputOptions\": []\r\n  },\r\n  {\r\n    \"prompt\": \"What is your major or area of study?\",\r\n    \"type\": \"CHOOSE_ONE\",\r\n    \"inputOptions\": [\r\n      \"Biology & Biotechnology\",\r\n      \"Biomedical Engineering\",\r\n      \"Business\",\r\n      \"Chemical Engineering\",\r\n      \"Chemistry & Biochemistry\",\r\n      \"Civil & Environmental Engineering\",\r\n      \"Computer Science\",\r\n      \"Electrical & Computer Engineering\",\r\n      \"Fire Protection Engineering\",\r\n      \"Humanities & Arts\",\r\n      \"Mathematical Sciences\",\r\n      \"Mechanical Engineering\",\r\n      \"Physics\",\r\n      \"Aerospace Engineering\",\r\n      \"Architectural Engineering\",\r\n      \"Bioinformatics & Computational Biology\",\r\n      \"Environmental Engineering\",\r\n      \"Industrial Engineering\",\r\n      \"Robotics Engineering\",\r\n      \"Other\"\r\n    ]\r\n  },\r\n  {\r\n    \"prompt\": \"Where do you currently live (or have lived) during your time at WPI?\",\r\n    \"type\": \"CHOOSE_ONE\",\r\n    \"inputOptions\": [\r\n      \"On-Campus Residence\",\r\n      \"Off-Campus Apartment/House\",\r\n      \"Commuter\"\r\n    ]\r\n  }\r\n];","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport buildingQuestions from \"../data/BuildingQuestions\";\r\nimport profileQuestions from \"../data/ProfileQuestions\";\r\nimport {interpolateGreens, interpolateGreys} from \"d3-scale-chromatic\";\r\nimport \"../css/Questionnaire.css\";\r\nimport {text} from \"d3-fetch\";\r\n\r\n/**\r\n * Provides functionality for generating JSX elements for a\r\n * given question or array of questions. Must be initialized to a list of buildings.\r\n */\r\nclass Questionnaire extends Component {\r\n    helpText = {\r\n        \"RATING\": \"Please rate all the given buildings from 0-10. If you have no rating for a building, leave blank!\",\r\n        \"CHOOSE_ONE\": \"Please pick one answer from the set of answers\",\r\n        \"CHOOSE_MULTIPLE\": \"Please pick all answers that apply\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {\r\n            buildings\r\n        } = props;\r\n\r\n        console.log(buildings);\r\n\r\n        // initialize static profiling questions state tracking\r\n        this.state = {\r\n            \"percentComplete\": 0,\r\n            \"gradeLevel\": \"Freshman\",\r\n            \"age\": 18,\r\n            \"major\": \"\",\r\n            \"residence\": \"\"\r\n        };\r\n\r\n        // initialize building response state tracking\r\n        buildings.forEach(building => {\r\n            this.state[building.name] = Questionnaire.initializeResponsesStateForBuilding(building);\r\n        });\r\n\r\n        // bindings\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n\r\n    }\r\n\r\n    renderProfileQuestions() {\r\n        const questionElements = [];\r\n\r\n        // changes for each question\r\n        let inputComponents = [];\r\n        let q = profileQuestions[0];\r\n\r\n        // grade level\r\n        inputComponents = q.inputOptions.map((ans, index) => (\r\n            <label key={ans+index}>\r\n                <input type=\"radio\"\r\n                       value={ans}\r\n                       checked={this.state.gradeLevel === ans}\r\n                       onChange={event => this.setState({\"gradeLevel\": event.target.value})}\r\n                />\r\n                {ans}\r\n            </label>\r\n        ));\r\n\r\n        questionElements.push(\r\n            <div className=\"question profile-question\" key={\"profile_0\"}>\r\n                <h2>{q.prompt}</h2>\r\n                <h3>{this.helpText.CHOOSE_ONE}</h3>\r\n                <div className=\"answers-container\">\r\n                    {inputComponents}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // age\r\n        q = profileQuestions[1];\r\n        questionElements.push(\r\n            <div className=\"question profile-question\" key={\"profile_1\"}>\r\n                <h2>{q.prompt}</h2>\r\n                <h3>{\"Please write your age.\"}</h3>\r\n                <div className=\"answers-container\">\r\n                    <label>\r\n                        <input\r\n                            style={{\r\n                                \"width\": \"15vw\",\r\n                                \"textAlign\": \"center\",\r\n                                \"padding\": 0,\r\n                                \"marginRight\": \"2vw\"\r\n                            }}\r\n                            type=\"text\"\r\n                            value={this.state.age}\r\n                            onChange={evt => this.setState({ \"age\": evt.target.value})}\r\n                            placeholder={\"21\"}\r\n                        /> Years old\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // major\r\n        q = profileQuestions[2];\r\n\r\n        inputComponents = q.inputOptions.map((ans, index) => (\r\n            <label key={ans+index}>\r\n                <input type=\"radio\"\r\n                       value={ans}\r\n                       checked={this.state.major === ans}\r\n                       onChange={event => this.setState({\"major\": event.target.value})}\r\n                />\r\n                {ans}\r\n            </label>\r\n        ));\r\n\r\n        questionElements.push(\r\n            <div className=\"question profile-question\" key={\"profile_2\"}>\r\n                <h2>{q.prompt}</h2>\r\n                <h3>{this.helpText.CHOOSE_ONE}</h3>\r\n                <div className=\"answers-container\"\r\n                     id=\"major-container\"\r\n                     style={{\r\n                    \"overflow\": \"auto\",\r\n                    \"backgroundColor\": \"#212121\",\r\n                    \"borderRadius\": \"5px\",\r\n                    \"padding\": \"2vh\"\r\n                }}>\r\n                    {inputComponents}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        // residence\r\n        q = profileQuestions[3];\r\n        inputComponents = q.inputOptions.map((ans, index) => (\r\n            <label key={ans+index}>\r\n                <input type=\"radio\"\r\n                       value={ans}\r\n                       checked={this.state.residence === ans}\r\n                       onChange={event => this.setState({\"residence\": event.target.value})}\r\n                />\r\n                {ans}\r\n            </label>\r\n        ));\r\n\r\n        questionElements.push(\r\n            <div className=\"question profile-question\" key={\"profile_3\"}>\r\n                <h2>{q.prompt}</h2>\r\n                <h3>{this.helpText.CHOOSE_ONE}</h3>\r\n                <div className=\"answers-container\">\r\n                    {inputComponents}\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n\r\n        return questionElements;\r\n    }\r\n\r\n    // mounts scroll listener\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    // removes scroll listener\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    handleScroll(event) {\r\n        const maxScroll = document.body.scrollHeight - window.innerHeight;\r\n        this.setState({\r\n            \"percentComplete\": Math.round((window.scrollY / maxScroll) * 100)\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Object} building contains name and category\r\n     */\r\n    static initializeResponsesStateForBuilding (building) {\r\n        const buildingState = {};\r\n        const sections = Object.keys(buildingQuestions);\r\n\r\n        // 1st section\r\n        buildingQuestions[sections[0]].forEach((question, index) => {\r\n            if (!question.filter.includes(building.category)) return;\r\n\r\n            let val;\r\n\r\n            switch (question.type) {\r\n                case \"RATING\":\r\n                    val = \"\";\r\n                    break;\r\n                case \"CHOOSE_ONE\":\r\n                    val = false;\r\n                    break;\r\n                case \"CHOOSE_MULTIPLE\":\r\n                    val = false;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Question type not accounted for: \" + question.type);\r\n\r\n            }\r\n\r\n            buildingState[`${sections[0]}_${index}`] = val;\r\n        });\r\n\r\n        // 2nd section\r\n        buildingQuestions[sections[1]].forEach((question, index) => {\r\n            if (!question.filter.includes(building.category)) return;\r\n\r\n            let val;\r\n\r\n            switch (question.type) {\r\n                case \"RATING\":\r\n                    val = \"\";\r\n                    break;\r\n                case \"CHOOSE_ONE\":\r\n                    val = false;\r\n                    break;\r\n                case \"CHOOSE_MULTIPLE\":\r\n                    val = false;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Question type not accounted for: \" + question.type);\r\n\r\n            }\r\n\r\n            buildingState[`${sections[1]}_${index}`] = val;\r\n        });\r\n\r\n        // 3rd section\r\n        buildingQuestions[sections[2]].forEach((question, index) => {\r\n            if (!question.filter.includes(building.category)) return;\r\n\r\n            let val;\r\n\r\n            switch (question.type) {\r\n                case \"RATING\":\r\n                    val = \"\";\r\n                    break;\r\n                case \"CHOOSE_ONE\":\r\n                    val = false;\r\n                    break;\r\n                case \"CHOOSE_MULTIPLE\":\r\n                    val = false;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Question type not accounted for: \" + question.type);\r\n\r\n            }\r\n\r\n            buildingState[`${sections[2]}_${index}`] = val;\r\n        });\r\n\r\n        return buildingState;\r\n    }\r\n\r\n    /**\r\n     * Updates state for given rating questionID, to a given location to new value.\r\n     * @param locationName\r\n     * @param questionID\r\n     * @param newValue\r\n     */\r\n    handleChangeRating(locationName, questionID, newValue) {\r\n\r\n        const constrainValue = () => {\r\n            if (!newValue) return \"\";\r\n\r\n            const num = Number.parseFloat(newValue);\r\n\r\n            if (num < 0) return 0;\r\n            else if (num > 10) return 10;\r\n            else return num;\r\n\r\n        };\r\n\r\n        this.setState(oldState => {\r\n            const newState = {}; // object containing all buildings\r\n            newState[locationName] = {...oldState[locationName]}; // object containing questions\r\n            newState[locationName][questionID] = constrainValue(); // question value\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles change in a given choose one question.\r\n     * @param {String} locationName name of state key that has been selected\r\n     * @param {Array<String>} allLocations array of all other locations in order to disable other buttons\r\n     * @param {String} questionID id of question in order to access state dictionary\r\n     * @param {Boolean} value whether it is selected or not\r\n     */\r\n    handleChangeChooseOne(locationName, allLocations, questionID, value) {\r\n\r\n        this.setState(oldState => {\r\n            const newState = {}; // object containing all buildings\r\n            newState[locationName] = {...oldState[locationName]}; // object containing questions\r\n            newState[locationName][questionID] = value; // question value\r\n\r\n            allLocations.forEach(disableLocation => {\r\n                newState[disableLocation] = {...oldState[disableLocation]};\r\n                newState[disableLocation][questionID] = !value;\r\n            });\r\n\r\n            console.log(newState);\r\n\r\n            return newState;\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates state for given rating questionID, to a given location to new value.\r\n     * @param locationName\r\n     * @param questionID\r\n     * @param newValue\r\n     */\r\n    handleChangeChooseMultiple(locationName, questionID, newValue) {\r\n\r\n        this.setState(oldState => {\r\n            const newState = {}; // object containing all buildings\r\n            newState[locationName] = {...oldState[locationName]}; // object containing questions\r\n            newState[locationName][questionID] = newValue; // question value\r\n\r\n            return newState;\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns a JSX element containing a question in the rating format.\r\n     *\r\n     * @param prompt\r\n     * @param filter\r\n     * @param questionID\r\n     * @returns {*}\r\n     */\r\n    renderRatingQuestion(prompt, filter, questionID) {\r\n        let possibleResponses;\r\n\r\n        // filter only buildings that are of appropriate category.\r\n        if (prompt !== \"Rate each dining hall\") {\r\n            possibleResponses = this.props.buildings\r\n                .filter(b => filter.includes(b.category))\r\n                .map(b => b.name)\r\n                .sort();\r\n        } else {\r\n            const diningHallNames = [\r\n                \"CC Dining Area\",\r\n                \"Goat's Head\",\r\n                \"Library Cafe\",\r\n                \"Pulse On Dining (DAKA)\"\r\n            ];\r\n\r\n            possibleResponses = this.props.buildings\r\n                .filter(b => filter.includes(b.category) && diningHallNames.includes(b.name))\r\n                .map(b => b.name)\r\n                .sort();\r\n        }\r\n\r\n        // map each possible response to an input label\r\n        const inputComponents = possibleResponses.map(locationName => (\r\n            <label key={locationName+questionID}>\r\n                <input type=\"number\"\r\n                       min=\"0\"\r\n                       max=\"10\"\r\n                       step=\"0.1\"\r\n                       value={this.state[locationName][questionID]}\r\n                       onChange={event => this.handleChangeRating(locationName, questionID, event.target.value)}\r\n                />\r\n                <h5>/10</h5>\r\n                {locationName}\r\n            </label>\r\n        ));\r\n\r\n        return (\r\n            <div className=\"question rating-question\" key={questionID}>\r\n                <h2>{prompt}</h2>\r\n                <h3>{this.helpText.RATING}</h3>\r\n                <div className=\"answers-container\">\r\n                    {inputComponents}\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders a multiple choice question\r\n     * @param prompt\r\n     * @param filter\r\n     * @param questionID\r\n     * @returns {*}\r\n     */\r\n    renderChooseOneQuestion(prompt, filter, questionID) {\r\n\r\n        // filter only buildings that are of appropriate category.\r\n        const possibleResponses = this.props.buildings\r\n            .filter(b => filter.includes(b.category))\r\n            .map(b => b.name)\r\n            .sort();\r\n\r\n        // map each possible response to an input label\r\n        const inputComponents = possibleResponses.map(locationName => (\r\n            <label key={locationName+questionID}>\r\n                <input type=\"radio\"\r\n                       value={true}\r\n                       checked={this.state[locationName][questionID]}\r\n                       onChange={event => this.handleChangeChooseOne(locationName, possibleResponses.filter(res => res !== locationName), questionID, Boolean(event.target.value))}\r\n                />\r\n                {locationName}\r\n            </label>\r\n        ));\r\n\r\n        return (\r\n            <div className=\"question rating-question\" key={questionID}>\r\n                <h2>{prompt}</h2>\r\n                <h3>{this.helpText.CHOOSE_ONE}</h3>\r\n                <div className=\"answers-container\">\r\n                    {inputComponents}\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders a multiple choice question\r\n     * @param prompt\r\n     * @param filter\r\n     * @param questionID\r\n     * @returns {*}\r\n     */\r\n    renderChooseMultipleQuestion(prompt, filter, questionID) {\r\n\r\n        // filter only buildings that are of appropriate category.\r\n        const possibleResponses = this.props.buildings\r\n            .filter(b => filter.includes(b.category))\r\n            .map(b => b.name)\r\n            .sort();\r\n\r\n        // map each possible response to an input label\r\n        const inputComponents = possibleResponses.map(locationName => (\r\n            <label className=\"checkbox-label\" key={locationName+questionID}>\r\n                <input type=\"checkbox\"\r\n                       checked={this.state[locationName][questionID]}\r\n                       onChange={event => this.handleChangeChooseMultiple(\r\n                           locationName,\r\n                           questionID,\r\n                           event.target.checked)}\r\n                />\r\n                <span className=\"checkbox-custom rectangular\"/>\r\n                {locationName}\r\n            </label>\r\n        ));\r\n\r\n        return (\r\n            <div className=\"question rating-question\" key={questionID}>\r\n                <h2>{prompt}</h2>\r\n                <h3>{this.helpText.CHOOSE_MULTIPLE}</h3>\r\n                <div className=\"answers-container\">\r\n                    {inputComponents}\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * Renders all questions in questionnaire\r\n     * @returns {*[]}\r\n     */\r\n    renderQuestions() {\r\n        const categories = Object.keys(buildingQuestions);\r\n\r\n        // iterate through each category\r\n        return categories.map(category => (\r\n            // iterate through questions in a category\r\n            buildingQuestions[category].map(({type, prompt, filter}, index) => {\r\n                switch (type) {\r\n\r\n                    case \"RATING\":\r\n                        return this.renderRatingQuestion(prompt, filter, `${category}_${index}`);\r\n                    case \"CHOOSE_ONE\":\r\n                        return this.renderChooseOneQuestion(prompt, filter, `${category}_${index}`);\r\n                    case \"CHOOSE_MULTIPLE\":\r\n                        return this.renderChooseMultipleQuestion(prompt, filter, `${category}_${index}`);\r\n                    default:\r\n                        throw new Error(\"Question type not accounted for!\");\r\n\r\n                }\r\n\r\n            })\r\n        ));\r\n\r\n    }\r\n\r\n    /**\r\n     * Submits responses to back end API;\r\n     * @returns {null}\r\n     */\r\n    submitResponses() {\r\n\r\n        const convertState = () => {\r\n            return this.props.buildings.map(building => ({\r\n                \"buildingName\": building.name,\r\n                ...this.state[building.name]\r\n            }));\r\n        };\r\n\r\n        const backEndUrl = \"http://localhost:9595/datavis/campus-survey/submit\";\r\n        const init = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                profile: {\r\n                    \"gradeLevel\": this.state.gradeLevel,\r\n                    \"age\": this.state.age,\r\n                    \"major\": this.state.major,\r\n                    \"residence\": this.state.residence\r\n                },\r\n                response: convertState()\r\n            })\r\n        };\r\n\r\n        fetch(backEndUrl, init)\r\n            .then(ans => ans.json())\r\n            .then(console.log);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const avoidGrays = (input) => {\r\n            if (input > 0.5 && input < 0.7) return 0.7;\r\n            else return input;\r\n        };\r\n\r\n        const progressElementStyle = {\r\n            \"color\": interpolateGreys(avoidGrays(1 - this.state.percentComplete / 100)),\r\n            \"backgroundColor\": interpolateGreens(this.state.percentComplete / 100),\r\n            \"cursor\": this.state.percentComplete === 100 ? \"pointer\" : \"default\"\r\n        };\r\n\r\n        return (\r\n            <div className=\"question-container\">\r\n                <div className=\"question\">\r\n                    <h2>Welcome to the comprehensive WPI campus survey!</h2>\r\n                    <h3>A data visualization endeavor by Léo Gonsalves.</h3>\r\n                    <p>The objective of this project is to gather qualitative data\r\n                        about different aspects of a variety of WPI locations. The first set of questions\r\n                        will form a profile of the subject responding to the questionnaire.\r\n                        Its purpose is to provide a variety of filters to the visualization. </p>\r\n                    <p> The other sets of questions will require your utmost honesty. Please answer\r\n                        them as openly as possible, and as thoroughly as possible. Your answers\r\n                        will help draw an accurate map of WPI from the view of the student body.</p>\r\n                    <p> A link to the visualization can be found here. </p>\r\n                    <p> About the author</p>\r\n                    <hr/>\r\n                </div>\r\n                <div className={\"progress-overlay\"}\r\n                     style={progressElementStyle}\r\n                     onClick={() => this.state.percentComplete < 100 ?\r\n                         null : this.submitResponses()} >\r\n                    {this.state.percentComplete < 100 ?\r\n                        `${this.state.percentComplete}% Complete${ this.state.percentComplete > 85 ? \"! Almost done!\" : \".\"}` :\r\n                        \"You're done! Click here to submit!\"\r\n                    }\r\n                </div>\r\n                {this.renderProfileQuestions()}\r\n                {this.renderQuestions()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuestionnaire.propTypes = {\r\n    \"buildings\": PropTypes.arrayOf(PropTypes.shape({\r\n        \"name\": PropTypes.string,\r\n        \"category\": PropTypes.string\r\n    }))\r\n};\r\n\r\nexport default Questionnaire;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"../css/Home.css\";\r\n\r\nconst Home = props => {\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Link to=\"/survey\">\r\n                <div className=\"survey\">\r\n                    <h1>SURVEY</h1>\r\n                </div>\r\n            </Link>\r\n            <Link to=\"/vis\">\r\n                <div className=\"visualization\">\r\n                    <h1>VIS</h1>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Home;\r\n","import {\r\n    interpolateBrBG,\r\n    interpolateGreens,\r\n    interpolateRdBu, interpolateRdGy, interpolateRdPu, interpolateRdYlBu,\r\n    interpolateRdYlGn,\r\n    interpolateReds,\r\n    interpolateSpectral, interpolateYlGn, interpolateYlOrRd\r\n} from \"d3-scale-chromatic\";\r\n\r\nconst metricToDescriptor = {\r\n    STUDY_QUALITY_0: \"Lecture Enjoyability\",\r\n    STUDY_QUALITY_1: \"Building Navigability\",\r\n    STUDY_QUALITY_2: \"Noise Rating (lower is better)\",\r\n    STUDY_QUALITY_3: \"Comfort Rating\",\r\n    STUDY_QUALITY_4: \"Group Meeting Accommodation Rating\",\r\n    STUDY_QUALITY_5: \"Solo Studying Rating\",\r\n    STUDY_QUALITY_6: \"Best for IQP/MQP Rank\",\r\n    STUDY_QUALITY_7: \"Best Exam Study Spot Rank\",\r\n    STUDY_QUALITY_8: \"Best Final/Midterm Study Spot Rank\",\r\n    STUDY_QUALITY_9: \"Worst Final/Midterm Study Spot Rank\",\r\n    STUDY_QUALITY_10: \"Skip Class Rating\",\r\n    LIVING_AND_EATING_0: \"Should I have a meal here?\",\r\n    LIVING_AND_EATING_1: \"Relaxmeter\",\r\n    LIVING_AND_EATING_2: \"How appropriate is this place to chill with friends?\",\r\n    LIVING_AND_EATING_3: \"Extra curricular activity rating\",\r\n    LIVING_AND_EATING_4: \"Nap Spot Rating\",\r\n    LIVING_AND_EATING_5: \"Popularity\",\r\n    LIVING_AND_EATING_6: \"Dining Hall Rating\",\r\n    MISC_0: \"How enjoyable is it to poop here?\",\r\n    MISC_1: \"Student beauty meter\",\r\n    MISC_2: \"Photogenic Rating\",\r\n    MISC_3: \"Post-Midnight Rating\"\r\n};\r\n\r\nconst metricToColorInterpolation = {\r\n    STUDY_QUALITY_0: interpolateRdYlGn,\r\n    STUDY_QUALITY_1: interpolateRdYlBu,\r\n    STUDY_QUALITY_2: val => interpolateRdYlBu(1 - val),\r\n    STUDY_QUALITY_3: val => interpolateRdPu(1 - val),\r\n    STUDY_QUALITY_4: interpolateRdYlBu,\r\n    STUDY_QUALITY_5: interpolateRdYlBu,\r\n    STUDY_QUALITY_6: interpolateYlGn,\r\n    STUDY_QUALITY_7: interpolateYlGn,\r\n    STUDY_QUALITY_8: interpolateYlGn,\r\n    STUDY_QUALITY_9: interpolateYlOrRd,\r\n    STUDY_QUALITY_10: interpolateYlOrRd,\r\n    LIVING_AND_EATING_0: interpolateRdYlGn,\r\n    LIVING_AND_EATING_1: interpolateRdBu,\r\n    LIVING_AND_EATING_2: interpolateRdBu,\r\n    LIVING_AND_EATING_3: interpolateRdYlGn,\r\n    LIVING_AND_EATING_4: interpolateBrBG,\r\n    LIVING_AND_EATING_5: val => interpolateRdGy(1- val),\r\n    LIVING_AND_EATING_6: interpolateRdYlGn,\r\n    MISC_0: interpolateRdYlGn,\r\n    MISC_1: interpolateRdYlGn,\r\n    MISC_2: interpolateRdYlGn,\r\n    MISC_3: interpolateRdYlGn\r\n};\r\n\r\n\r\nconst metricToQuestionType = {\r\n    STUDY_QUALITY_0: \"RATING\",\r\n    STUDY_QUALITY_1: \"RATING\",\r\n    STUDY_QUALITY_2: \"RATING\",\r\n    STUDY_QUALITY_3: \"RATING\",\r\n    STUDY_QUALITY_4: \"RATING\",\r\n    STUDY_QUALITY_5: \"RATING\",\r\n    STUDY_QUALITY_6: \"CHOOSE_MANY\",\r\n    STUDY_QUALITY_7: \"CHOOSE_MANY\",\r\n    STUDY_QUALITY_8: \"CHOOSE_ONE\",\r\n    STUDY_QUALITY_9: \"CHOOSE_ONE\",\r\n    STUDY_QUALITY_10: \"RATING\",\r\n    LIVING_AND_EATING_0: \"RATING\",\r\n    LIVING_AND_EATING_1: \"RATING\",\r\n    LIVING_AND_EATING_2: \"RATING\",\r\n    LIVING_AND_EATING_3: \"RATING\",\r\n    LIVING_AND_EATING_4: \"RATING\",\r\n    LIVING_AND_EATING_5: \"RATING\",\r\n    LIVING_AND_EATING_6: \"RATING\",\r\n    MISC_0: \"RATING\",\r\n    MISC_1: \"RATING\",\r\n    MISC_2: \"RATING\",\r\n    MISC_3: \"RATING\"\r\n};\r\n\r\nexport {\r\n    metricToDescriptor,\r\n    metricToQuestionType,\r\n    metricToColorInterpolation\r\n};\r\n","import {metricToDescriptor, metricToQuestionType, metricToColorInterpolation} from \"../data/MetricConverter\";\r\nimport BuildingQuestions from \"../data/BuildingQuestions\";\r\n\r\n/**\r\n * Responsible for converting questions into a\r\n * descriptive qualitative title as well as doing most data manipulation\r\n * when fetching responses.\r\n */\r\nclass DataFetcherAndParser {\r\n    static url = \"http://localhost:9595/datavis/\";\r\n\r\n    /**\r\n     * Parses data and returns a question-mapped\r\n     * set of averages for each building\r\n     * @return {Promise<Object>} data\r\n     */\r\n    static getAverages() {\r\n\r\n        const init = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        };\r\n\r\n        return fetch(`${this.url}/campus-survey/responses`, init)\r\n            .then(res => res.json());\r\n    }\r\n\r\n    /**\r\n     * Returns type of question in order to properly render\r\n     * @param question\r\n     * @returns {*}\r\n     */\r\n    static getTypeOf(question) {\r\n        return metricToQuestionType[question];\r\n    }\r\n\r\n    /**\r\n     * Returns descriptive text for displaying when choosing a metric.\r\n     * @param question\r\n     * @returns {*}\r\n     */\r\n    static getQuestionDescriptor(question) {\r\n        return metricToDescriptor[question];\r\n    }\r\n\r\n    static getAllQuestionIDs() {\r\n        return Object.keys(metricToDescriptor);\r\n    }\r\n\r\n    /**\r\n     * Returns a random metric. Useful for initializing graph to\r\n     * a different metric each initialization.\r\n     */\r\n    static pickRandomMetric() {\r\n        const metrics = Object.keys(metricToDescriptor);\r\n        return metrics[Math.floor(Math.random() * metrics.length)];\r\n    }\r\n\r\n    /**\r\n     * Returns a color value\r\n     * @param metric\r\n     * @param value must be between 0-1\r\n     */\r\n    static getColor(metric, value) {\r\n        return metricToColorInterpolation[metric](value);\r\n    }\r\n\r\n}\r\n\r\nexport default DataFetcherAndParser;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {geoMercator, geoPath} from \"d3-geo\";\r\nimport {event, mouse, select} from \"d3-selection\";\r\nimport {scaleLinear} from \"d3-scale\";\r\nimport {zoom, zoomIdentity, zoomTransform} from \"d3-zoom\";\r\nimport {extent} from \"d3-array\";\r\nimport DataFetcherAndParser from \"../utils/DataFetcherAndParser\";\r\nimport \"../css/Visualization.css\";\r\nimport {interpolateRdYlGn} from \"d3-scale-chromatic\";\r\n\r\nclass Visualization extends Component {\r\n    dimensions = {\r\n        height: 600,\r\n        width: 600\r\n    };\r\n\r\n    strokeMap = {\r\n        \"street\": \"#000000\",\r\n        \"campusLane\": \"#a5a5a5\",\r\n        \"building\": \"#010057\",\r\n        \"poi\": \"#004a00\",\r\n        \"residenceHall\": \"#4a0200\"\r\n    };\r\n\r\n    colorMap = {\r\n        \"street\": \"#444\",\r\n        \"campusLane\": \"#7d7d7d\",\r\n        \"building\": \"#6b94f2\",\r\n        \"poi\": \"#6dc46f\",\r\n        \"residenceHall\": \"#b35eb2\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // displayed buildings are set here\r\n        this.state = {\r\n            \"selectedMetric\": \"\", // DataFetcherAndParser.pickRandomMetric(),\r\n            \"data\": {},\r\n            \"tooltip\": {\r\n                \"locationName\": \"Location\",\r\n                \"locationCategory\": \"\",\r\n                \"color\": \"#ffffff\",\r\n                \"rank\": -1,\r\n                \"display\": false\r\n            }\r\n        };\r\n\r\n        this.svg = React.createRef();\r\n\r\n        // bind\r\n        this.d3RenderMap = this.d3RenderMap.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // parse map for location names\r\n        // set state for locations to be displayed to all true\r\n        this.d3RenderMap();\r\n\r\n        // fetch data\r\n        DataFetcherAndParser.getAverages()\r\n            .then(({body}) => this.setState({\r\n                \"data\": body,\r\n                \"ranking\": this.parseRanking(body, this.state.selectedMetric)\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param data\r\n     * @param metric\r\n     * @returns {{name: string, value: *}[]}\r\n     */\r\n    parseRanking(data, metric) {\r\n        const buildingNames = Object.keys(data);\r\n        return buildingNames.map(name => ({\r\n            name,\r\n            \"value\": data[name][metric]\r\n        })).sort((a, b) => a.value < b.value ? 1 : -1)\r\n            .filter(d => typeof(d.value) !== \"undefined\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if ( prevState.selectedMetric !== this.state.selectedMetric ||\r\n             prevState.data !== this.state.data ) {\r\n            this.d3UpdateMap();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Renders map on SVG for the first time\r\n     */\r\n    d3RenderMap() {\r\n\r\n        const updateTooltip = (name, display, rank, color, locationCategory) => {\r\n            const tooltip = {\r\n                ...this.state.tooltip,\r\n            };\r\n            tooltip.locationName = name !== null ? name : tooltip.locationName;\r\n            tooltip.display = display !== null ? display : tooltip.display;\r\n            tooltip.rank = rank !== null ? rank : tooltip.rank;\r\n            tooltip.color = color ? color : tooltip.color;\r\n            tooltip.locationCategory = locationCategory ? locationCategory : tooltip.locationCategory;\r\n\r\n            this.setState({\r\n                tooltip\r\n            });\r\n        };\r\n\r\n        const {\r\n            geoJSON\r\n        } = this.props;\r\n\r\n        const {\r\n            height,\r\n            width\r\n        } = this.dimensions;\r\n\r\n        const svg = select(this.svg.current);\r\n\r\n        const noStreets = geoJSON.features.filter(feature => (\r\n            feature.properties.category !== \"street\" && feature.properties.category !== \"campusLane\"\r\n        ));\r\n\r\n        const onlyStreets = geoJSON.features.filter(feature => (\r\n            feature.properties.category === \"street\" || feature.properties.category === \"campusLane\"\r\n        ));\r\n\r\n        const filteredData = {...geoJSON};\r\n        const streetData = {...geoJSON};\r\n\r\n        streetData.features = onlyStreets;\r\n        filteredData.features = noStreets;\r\n\r\n        function reset() {\r\n            updateTooltip(null, false, null);\r\n\r\n            svg.transition().duration(750).call(\r\n                zoomFunc.transform,\r\n                zoomIdentity,\r\n                zoomTransform(svg.node()).invert([width / 2, height / 2])\r\n            );\r\n        }\r\n\r\n        const findRankAndUpdateTooltip = (d) => {\r\n\r\n            const {\r\n                ranking\r\n            } = this.state;\r\n\r\n            // find rank\r\n            for (let i = 0; i < ranking.length; i++) {\r\n                if (ranking[i].name === d.properties.name) {\r\n                    updateTooltip(d.properties.name, true, i + 1, null, d.properties.category);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            updateTooltip(d.properties.name, true, undefined, null, d.properties.category);\r\n        };\r\n\r\n        function clicked(d) {\r\n            findRankAndUpdateTooltip(d);\r\n\r\n            const [[x0, y0], [x1, y1]] = path.bounds(d);\r\n            event.stopPropagation();\r\n            svg.transition().duration(750).call(\r\n                zoomFunc.transform,\r\n                zoomIdentity\r\n                    .translate(width / 2, height / 2)\r\n                    .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))\r\n                    .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\r\n                mouse(svg.node())\r\n            );\r\n        }\r\n\r\n        function zoomed() {\r\n            const {transform} = event;\r\n            g.attr(\"transform\", transform);\r\n            g.attr(\"stroke-width\", 1 / transform.k);\r\n        }\r\n\r\n        const projection = geoMercator().fitExtent([[0, 0], [height, width]], filteredData);\r\n        const path = geoPath().projection(projection);\r\n\r\n        const zoomFunc = zoom()\r\n            .scaleExtent([1, 8])\r\n            .on(\"zoom\", zoomed);\r\n\r\n\r\n        svg.on(\"click\", reset);\r\n\r\n        const g = svg.append(\"g\").attr(\"id\", \"viewport\");\r\n\r\n        // streets\r\n        g.append(\"g\")\r\n            .attr(\"id\", \"streets\")\r\n            .selectAll(\"path\")\r\n            .data(streetData.features)\r\n            .join(\"path\")\r\n            .attr(\"fill\",  d => d.properties.category === \"campusLane\" ? \"none\" : this.colorMap[d.properties.category])\r\n            .attr(\"stroke\", d => d.properties.category === \"campusLane\" ? this.colorMap[d.properties.category] : \"none\")\r\n            .attr(\"stroke-width\", d => d.properties.category === \"campusLane\" ? \"3px\" : \"none\")\r\n            .attr(\"d\", path)\r\n            .append(\"title\")\r\n            .text(d => d.properties.name);\r\n\r\n        // buildings and pois etc\r\n        g.append(\"g\")\r\n            .attr(\"cursor\", \"pointer\")\r\n            .attr(\"id\", \"buildings\")\r\n            .selectAll(\"path\")\r\n            .data(filteredData.features)\r\n            .join(\"path\")\r\n            .attr(\"fill\", d => this.colorMap[d.properties.category])\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 0.5)\r\n            .on(\"click\", clicked)\r\n            .attr(\"d\", path)\r\n            .append(\"title\")\r\n            .text(d => d.properties.name);\r\n\r\n        svg.call(zoomFunc);\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates map given a state change\r\n     */\r\n    d3UpdateMap() {\r\n\r\n        const {\r\n            ranking,\r\n            selectedMetric,\r\n            data\r\n        } = this.state;\r\n\r\n        const path = select(this.svg.current)\r\n            .select(\"#buildings\")\r\n            .selectAll(\"path\");\r\n\r\n        // create fill logic for rank-like data\r\n        if (DataFetcherAndParser.getTypeOf(selectedMetric) === \"RATING\") {\r\n\r\n            const fillLogic = d => data[d.properties.name] && data[d.properties.name][selectedMetric] ?\r\n                DataFetcherAndParser.getColor(selectedMetric, data[d.properties.name][selectedMetric] / 10) :\r\n                \"rgba(126,126,126,0.58)\";\r\n\r\n\r\n            path.attr(\"fill\", fillLogic);\r\n\r\n        }\r\n        else {\r\n\r\n            // iterate and find extents\r\n            const scale = scaleLinear().domain(extent(ranking, v => v.value)).range([0, 1]);\r\n\r\n            const fillLogic = d => data[d.properties.name] && data[d.properties.name][selectedMetric] ?\r\n                DataFetcherAndParser.getColor(selectedMetric, scale(data[d.properties.name][selectedMetric])) :\r\n                \"rgba(126,126,126,0.58)\";\r\n\r\n\r\n            path.attr(\"fill\", fillLogic);\r\n\r\n        }\r\n\r\n\r\n        // todo: change building colors based on selected parameter\r\n        // todo: change building opacity if parameter does not include building\r\n        // todo: render histogram on side view to compare building with others\r\n        // todo: keep track of tooltip state and update it with state updates\r\n        // todo: implement back end to start gathering data\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            selectedMetric,\r\n            tooltip,\r\n            data,\r\n            ranking\r\n        } = this.state;\r\n\r\n        const rankLogic = () => {\r\n            // ranking\r\n            if (DataFetcherAndParser.getTypeOf(selectedMetric) !== \"RATING\") {\r\n                return `${DataFetcherAndParser.getQuestionDescriptor(selectedMetric)} : ${tooltip.rank}`;\r\n            } else { // show rating\r\n                const rating = data[tooltip.locationName] ? data[tooltip.locationName][selectedMetric] : \"Unavailable\";\r\n                return `${DataFetcherAndParser.getQuestionDescriptor(selectedMetric)} : ${rating ? rating : \"None\"}`\r\n            }\r\n        };\r\n\r\n        const subtitleLogic = () => {\r\n            // ranking\r\n            if (DataFetcherAndParser.getTypeOf(selectedMetric) === \"RATING\") {\r\n                return `Ranked at: ${tooltip.rank} position`;\r\n            } else { // show number of votes\r\n                const numVotes = data[tooltip.locationName] ? data[tooltip.locationName][selectedMetric] : \"Unavailable\";\r\n                return `Number of votes received: ${numVotes ? numVotes : \"None\"}`\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"options-overlay\">\r\n                    <select\r\n                        className=\"select-css\"\r\n                        onChange={e => this.setState({\r\n                        \"selectedMetric\": e.target.value,\r\n                        \"ranking\": this.parseRanking(this.state.data, e.target.value)\r\n                    })}>\r\n                        <option value=\"none\" selected disabled hidden>\r\n                            Select a Filter\r\n                        </option>\r\n                        {DataFetcherAndParser.getAllQuestionIDs().map((question, index) =>\r\n                            <option value={question} key={question + index}>\r\n                                {DataFetcherAndParser.getQuestionDescriptor(question)}\r\n                            </option>\r\n                        )}\r\n                    </select>\r\n                </div>\r\n                <div className={`title show-${!tooltip.display}`}>\r\n                    <h1>WPI Campus</h1>\r\n                    <h3>Through Different Lenses</h3>\r\n                </div>\r\n                <div className={`information-overlay show-${tooltip.display}`}>\r\n                    <h1 style={{\r\n                        \"background\": this.colorMap[tooltip.locationCategory]\r\n                    }}>{tooltip.locationName}</h1>\r\n                    <h1 style={{\r\n                        \"background\": data[tooltip.locationName] && data[tooltip.locationName][selectedMetric] ?\r\n                            interpolateRdYlGn(1 - tooltip.rank / ranking.length) :\r\n                            \"rgba(126,126,126,0.58)\"\r\n                    }}>{subtitleLogic()}</h1>\r\n                    <h1 style={{\r\n                        \"background\": data[tooltip.locationName] && data[tooltip.locationName][selectedMetric] ?\r\n                            DataFetcherAndParser.getColor(selectedMetric, data[tooltip.locationName][selectedMetric] / 10) :\r\n                            \"rgba(126,126,126,0.58)\"\r\n                    }}>{rankLogic()}</h1>\r\n                </div>\r\n                <svg\r\n                    id=\"d3Node\"\r\n                    height=\"100vh\"\r\n                    width=\"100vw\"\r\n                    viewBox={`0 0 ${this.dimensions.height} ${this.dimensions.width}`}\r\n                    preserveAspectRatio={\"xMidYMid meet\"}\r\n                    ref={this.svg}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nVisualization.propTypes = {\r\n    \"geoJSON\": PropTypes.object.isRequired\r\n};\r\n\r\nexport default Visualization;","import React, {Component} from 'react';\r\nimport {json} from \"d3-fetch\";\r\nimport '../css/App.css';\r\nimport Questionnaire from \"../views/Questionnaire\";\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport Home from \"../views/Home\";\r\nimport Visualization from \"../views/Visualization\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      \"geoJSON\": null,\r\n      \"buildings\": []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    json(\"https://raw.githubusercontent.com/lcgonsalves/WPI-Map-Poll/master/map.geojson\")\r\n        .then(fetchedJSON => this.setState({\r\n          \"geoJSON\": fetchedJSON,\r\n          \"buildings\": App.parseBuildingInformation(fetchedJSON)\r\n        }));\r\n\r\n  }\r\n\r\n  /**\r\n   * Parses GeoJSON to get cleaner building information\r\n   * @param {Object} geoJSON\r\n   * @returns {[Object]} object containing properties of each json feature\r\n   */\r\n  static parseBuildingInformation(geoJSON) {\r\n\r\n    let buildings = [];\r\n    const names = {};\r\n\r\n    // filter by non-street/campus lane features\r\n    geoJSON.features.forEach(\r\n        ({properties}) => {\r\n          if (properties.category !== \"street\" &&\r\n              properties.category !== \"campusLane\") {\r\n                if (!names[properties.name]) {\r\n                    buildings.push(properties);\r\n                    names[properties.name] = true;\r\n                }\r\n          }\r\n\r\n    });\r\n\r\n    return buildings;\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n      return (\r\n          <HashRouter>\r\n              <Switch>\r\n                  <Route path=\"/survey\">\r\n                      {this.state.geoJSON && <Questionnaire buildings={this.state.buildings} />}\r\n                  </Route>\r\n                  <Route path=\"/vis\">\r\n                      {this.state.geoJSON && <Visualization geoJSON={this.state.geoJSON} />}\r\n                  </Route>\r\n                  <Route path=\"/\">\r\n                      <Home/>\r\n                  </Route>\r\n              </Switch>\r\n          </HashRouter>\r\n      );\r\n\r\n    // return (\r\n    //     <div className=\"App\">\r\n    //         {this.state.geoJSON && <Questionnaire buildings={this.state.buildings} />}\r\n    //     </div>\r\n    // );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}